# IdeaBase GraphQL Schema
# 版本: 20250314140059

# 自定义标量类型
scalar Json
scalar Cursor
scalar DateTime

# 排序方向枚举，包含NULL值处理
enum SortDirection {
  ASC
  DESC
  ASC_NULLS_FIRST
  DESC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC_NULLS_LAST
}

# 空值条件枚举
enum IsInput {
  NULL
  NOT_NULL
}

# ------------------ 分页相关类型 ------------------

# 页面信息（用于游标分页）
type PageInfo {
  hasNext: Boolean!  # 是否有下一页
  hasPrev: Boolean!  # 是否有上一页
  start: Cursor  # 当前页第一条记录的游标
  end: Cursor  # 当前页最后一条记录的游标
}

# 聚合分组选项
input GroupBy {
  fields: [String!]  # 分组字段
  having: Json  # 分组过滤条件
  limit: Int  # 分组结果限制
  sort: Json  # 分组结果排序
}

# 评论表
type Comment {
  # 父Comment对象
  parent: Comment
  # 子Comment列表
  children: [Comment]!
  # 关联的User
  user: User!
  id: ID!
  createdAt: DateTime!
  # 父评论ID
  parentId: Int
  # 评论文章
  postId: Int!
  # 关联的Post
  post: Post!
  # 评论内容
  content: String!
  # 评论者
  userId: Int!
}

# 文章标签关联表
type PostTag {
  createdAt: DateTime!
  # 文章ID
  postId: ID!
  # 标签ID
  tagId: ID!
  # 关联的Post
  post: Post!
  # 关联的Tag
  tag: Tag!
}

# 组织表
type Organization {
  id: ID!
  # 父组织ID
  parentId: Int
  createdAt: DateTime!
  # 父Organization对象
  parent: Organization
  # 子Organization列表
  children: [Organization]!
  # 组织名称
  name: String!
}

# 文章表
type Post {
  # 关联的PostTag列表
  postTags: [PostTag]!
  # 关联的Comment列表
  comments: [Comment]!
  id: ID!
  # 作者ID
  userId: Int!
  # 关联的User
  user: User!
  # 多对多关联的Tag列表
  tags: [Tag]!
  # 标题
  title: String!
  # 内容
  content: String
  createdAt: DateTime!
}

# 标签表
type Tag {
  createdAt: DateTime!
  # 多对多关联的Post列表
  posts: [Post]!
  # 关联的PostTag列表
  postTags: [PostTag]!
  id: ID!
  # 标签名称
  name: String!
}

# 用户表
type User {
  createdAt: DateTime!
  # 用户名
  name: String!
  # 关联的Comment列表
  comments: [Comment]!
  # 关联的Post列表
  posts: [Post]!
  id: ID!
  # 邮箱
  email: String!
  updatedAt: DateTime
}

# ------------------ 连接和边类型（游标分页） ------------------

# Tag分页结果
type TagPage {
  items: [Tag!]!  # 直接返回Tag对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Tag分组结果
type TagGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# User分页结果
type UserPage {
  items: [User!]!  # 直接返回User对象数组
  pageInfo: PageInfo!
  total: Int!
}

# User分组结果
type UserGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Comment分页结果
type CommentPage {
  items: [Comment!]!  # 直接返回Comment对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Comment分组结果
type CommentGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# PostTag分页结果
type PostTagPage {
  items: [PostTag!]!  # 直接返回PostTag对象数组
  pageInfo: PageInfo!
  total: Int!
}

# PostTag分组结果
type PostTagGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Organization分页结果
type OrganizationPage {
  items: [Organization!]!  # 直接返回Organization对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Organization分组结果
type OrganizationGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Post分页结果
type PostPage {
  items: [Post!]!  # 直接返回Post对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Post分组结果
type PostGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# ------------------ 聚合函数相关类型 ------------------

# 数值聚合结果
type NumberStats {
  sum: Float  # 总和
  avg: Float  # 平均值
  min: Float  # 最小值
  max: Float  # 最大值
  count: Int!  # 计数
  countDistinct: Int!  # 去重计数
}

# 日期聚合结果
type DateTimeStats {
  min: DateTime  # 最早时间
  max: DateTime  # 最晚时间
  count: Int!  # 计数
  countDistinct: Int!  # 去重计数
}

# 字符串聚合结果
type StringStats {
  min: String  # 最小值(按字典序)
  max: String  # 最大值(按字典序)
  count: Int!  # 计数
  countDistinct: Int!  # 去重计数
}

# User聚合
type UserStats {
  count: Int!
  id: NumberStats
  email: StringStats
  updatedAt: DateTimeStats
  createdAt: DateTimeStats
  name: StringStats
  # 分组聚合
  groupBy: [UserGroup!]
}

# User分组结果
type UserGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Comment聚合
type CommentStats {
  count: Int!
  parentId: NumberStats
  postId: NumberStats
  content: StringStats
  userId: NumberStats
  id: NumberStats
  createdAt: DateTimeStats
  # 分组聚合
  groupBy: [CommentGroup!]
}

# Comment分组结果
type CommentGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# PostTag聚合
type PostTagStats {
  count: Int!
  createdAt: DateTimeStats
  postId: NumberStats
  tagId: NumberStats
  # 分组聚合
  groupBy: [PostTagGroup!]
}

# PostTag分组结果
type PostTagGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Organization聚合
type OrganizationStats {
  count: Int!
  id: NumberStats
  parentId: NumberStats
  createdAt: DateTimeStats
  name: StringStats
  # 分组聚合
  groupBy: [OrganizationGroup!]
}

# Organization分组结果
type OrganizationGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Post聚合
type PostStats {
  count: Int!
  content: StringStats
  createdAt: DateTimeStats
  id: NumberStats
  userId: NumberStats
  title: StringStats
  # 分组聚合
  groupBy: [PostGroup!]
}

# Post分组结果
type PostGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Tag聚合
type TagStats {
  count: Int!
  id: NumberStats
  name: StringStats
  createdAt: DateTimeStats
  # 分组聚合
  groupBy: [TagGroup!]
}

# Tag分组结果
type TagGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# ------------------ 过滤器类型定义 ------------------

# ID过滤器
input IDFilter {
  eq: ID  # Equals value
  in: [ID!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
}

# Int过滤器
input IntFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: Int  # Equals value
  in: [Int!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: Int  # Does not equal value
}

# Float过滤器
input FloatFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: Float  # Equals value
  in: [Float!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: Float  # Does not equal value
}

# DateTime过滤器
input DateTimeFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: DateTime  # Equals value
  in: [DateTime!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: DateTime  # Does not equal value
}

# String过滤器
input StringFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: String  # Equals value
  in: [String!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: String  # Does not equal value
  like: String  # Value matching pattern where '%' represents zero or more characters and '_' represents a single character. Eg. '_r%' finds values having 'r' in second position
  iLike: String  # Value matching (case-insensitive) pattern where '%' represents zero or more characters and '_' represents a single character. Eg. '_r%' finds values not having 'r' in second position
  regex: String  # Value matching regular pattern
  iRegex: String  # Value matching (case-insensitive) regex pattern
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
}

# Boolean过滤器
input BooleanFilter {
  eq: Boolean  # Equals value
  in: [Boolean!]  # Is in list of values
}

# Json过滤器
input JsonFilter {
  eq: Json  # Equals value
  in: [Json!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
}

# Post查询条件
input PostFilter {
  title: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  postTags: [PostTag]Filter
  comments: [Comment]Filter
  id: IDFilter
  userId: IntFilter
  user: UserFilter
  tags: [Tag]Filter
  and: [PostFilter!]
  or: [PostFilter!]
  not: PostFilter
}

# Tag查询条件
input TagFilter {
  posts: [Post]Filter
  postTags: [PostTag]Filter
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeFilter
  and: [TagFilter!]
  or: [TagFilter!]
  not: TagFilter
}

# User查询条件
input UserFilter {
  id: IDFilter
  email: StringFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
  name: StringFilter
  comments: [Comment]Filter
  posts: [Post]Filter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

# Comment查询条件
input CommentFilter {
  id: IDFilter
  createdAt: DateTimeFilter
  parentId: IntFilter
  postId: IntFilter
  post: PostFilter
  content: StringFilter
  userId: IntFilter
  parent: CommentFilter
  children: [Comment]Filter
  user: UserFilter
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

# PostTag查询条件
input PostTagFilter {
  tagId: IDFilter
  post: PostFilter
  tag: TagFilter
  createdAt: DateTimeFilter
  postId: IDFilter
  and: [PostTagFilter!]
  or: [PostTagFilter!]
  not: PostTagFilter
}

# Organization查询条件
input OrganizationFilter {
  id: IDFilter
  parentId: IntFilter
  createdAt: DateTimeFilter
  parent: OrganizationFilter
  children: [Organization]Filter
  name: StringFilter
  and: [OrganizationFilter!]
  or: [OrganizationFilter!]
  not: OrganizationFilter
}

# Comment排序
input CommentSort {
  createdAt: SortDirection
  parentId: SortDirection
  postId: SortDirection
  post: SortDirection
  content: SortDirection
  userId: SortDirection
  parent: SortDirection
  children: SortDirection
  user: SortDirection
  id: SortDirection
}

# PostTag排序
input PostTagSort {
  postId: SortDirection
  tagId: SortDirection
  post: SortDirection
  tag: SortDirection
  createdAt: SortDirection
}

# Organization排序
input OrganizationSort {
  children: SortDirection
  name: SortDirection
  id: SortDirection
  parentId: SortDirection
  createdAt: SortDirection
  parent: SortDirection
}

# Post排序
input PostSort {
  title: SortDirection
  content: SortDirection
  createdAt: SortDirection
  postTags: SortDirection
  comments: SortDirection
  id: SortDirection
  userId: SortDirection
  user: SortDirection
  tags: SortDirection
}

# Tag排序
input TagSort {
  postTags: SortDirection
  id: SortDirection
  name: SortDirection
  createdAt: SortDirection
  posts: SortDirection
}

# User排序
input UserSort {
  name: SortDirection
  comments: SortDirection
  posts: SortDirection
  id: SortDirection
  email: SortDirection
  updatedAt: SortDirection
  createdAt: SortDirection
}

# User创建输入
input UserCreateInput {
  comments: [Comment]!
  posts: [Post]!
  id: ID!
  email: String!
  updatedAt: DateTime
  createdAt: DateTime!
  name: String!
}

# User更新输入
input UserUpdateInput {
  email: String
  name: String
  comments: [Comment]
  posts: [Post]
}

# Comment创建输入
input CommentCreateInput {
  id: ID!
  createdAt: DateTime!
  parentId: Int
  postId: Int!
  post: Post!
  content: String!
  userId: Int!
  parent: Comment
  children: [Comment]!
  user: User!
}

# Comment更新输入
input CommentUpdateInput {
  user: User
  parentId: Int
  postId: Int
  post: Post
  content: String
  userId: Int
  parent: Comment
  children: [Comment]
}

# PostTag创建输入
input PostTagCreateInput {
  tag: Tag!
  createdAt: DateTime!
  postId: ID!
  tagId: ID!
  post: Post!
}

# PostTag更新输入
input PostTagUpdateInput {
  postId: ID
  tagId: ID
  post: Post
  tag: Tag
}

# Organization创建输入
input OrganizationCreateInput {
  parent: Organization
  children: [Organization]!
  name: String!
  id: ID!
  parentId: Int
  createdAt: DateTime!
}

# Organization更新输入
input OrganizationUpdateInput {
  parentId: Int
  parent: Organization
  children: [Organization]
  name: String
}

# Post创建输入
input PostCreateInput {
  comments: [Comment]!
  id: ID!
  userId: Int!
  user: User!
  tags: [Tag]!
  title: String!
  content: String
  createdAt: DateTime!
  postTags: [PostTag]!
}

# Post更新输入
input PostUpdateInput {
  title: String
  content: String
  postTags: [PostTag]
  comments: [Comment]
  userId: Int
  user: User
  tags: [Tag]
}

# Tag创建输入
input TagCreateInput {
  id: ID!
  name: String!
  createdAt: DateTime!
  posts: [Post]!
  postTags: [PostTag]!
}

# Tag更新输入
input TagUpdateInput {
  postTags: [PostTag]
  name: String
  posts: [Post]
}

# 关联操作
input ConnectInput {
  id: ID!
}

# 关系操作
input RelationInput {
  connect: [ID!]
  disconnect: [ID!]
}

# ------------------ 查询和变更 ------------------

# 查询根类型
type Query {
  # 单个Comment查询
  comment(id: ID!): Comment

  # Comment列表查询
  comments(
    filter: CommentFilter
    sort: [CommentSort!]
    limit: Int
    offset: Int
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): CommentPage!

  # Comment统计查询
  commentStats(filter: CommentFilter, groupBy: GroupBy): CommentStats!
  # 单个PostTag查询
  postTag(id: ID!): PostTag

  # PostTag列表查询
  postTags(
    filter: PostTagFilter
    sort: [PostTagSort!]
    limit: Int
    offset: Int
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): PostTagPage!

  # PostTag统计查询
  postTagStats(filter: PostTagFilter, groupBy: GroupBy): PostTagStats!
  # 单个Organization查询
  organization(id: ID!): Organization

  # Organization列表查询
  organizations(
    filter: OrganizationFilter
    sort: [OrganizationSort!]
    limit: Int
    offset: Int
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): OrganizationPage!

  # Organization统计查询
  organizationStats(filter: OrganizationFilter, groupBy: GroupBy): OrganizationStats!
  # 单个Post查询
  post(id: ID!): Post

  # Post列表查询
  posts(
    filter: PostFilter
    sort: [PostSort!]
    limit: Int
    offset: Int
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): PostPage!

  # Post统计查询
  postStats(filter: PostFilter, groupBy: GroupBy): PostStats!
  # 单个Tag查询
  tag(id: ID!): Tag

  # Tag列表查询
  tags(
    filter: TagFilter
    sort: [TagSort!]
    limit: Int
    offset: Int
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): TagPage!

  # Tag统计查询
  tagStats(filter: TagFilter, groupBy: GroupBy): TagStats!
  # 单个User查询
  user(id: ID!): User

  # User列表查询
  users(
    filter: UserFilter
    sort: [UserSort!]
    limit: Int
    offset: Int
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): UserPage!

  # User统计查询
  userStats(filter: UserFilter, groupBy: GroupBy): UserStats!
}

# 变更根类型
type Mutation {
  # Comment创建
  createComment(data: CommentCreateInput!): Comment!

  # Comment更新
  updateComment(id: ID!, data: CommentUpdateInput!): Comment!

  # Comment删除
  deleteComment(id: ID!): Boolean!

  # Comment批量删除
  deleteComment(filter: CommentFilter!): Int!
  # PostTag创建
  createPostTag(data: PostTagCreateInput!): PostTag!

  # PostTag更新
  updatePostTag(id: ID!, data: PostTagUpdateInput!): PostTag!

  # PostTag删除
  deletePostTag(id: ID!): Boolean!

  # PostTag批量删除
  deletePostTag(filter: PostTagFilter!): Int!
  # Organization创建
  createOrganization(data: OrganizationCreateInput!): Organization!

  # Organization更新
  updateOrganization(id: ID!, data: OrganizationUpdateInput!): Organization!

  # Organization删除
  deleteOrganization(id: ID!): Boolean!

  # Organization批量删除
  deleteOrganization(filter: OrganizationFilter!): Int!
  # Post创建
  createPost(data: PostCreateInput!): Post!

  # Post更新
  updatePost(id: ID!, data: PostUpdateInput!): Post!

  # Post删除
  deletePost(id: ID!): Boolean!

  # Post批量删除
  deletePost(filter: PostFilter!): Int!
  # Tag创建
  createTag(data: TagCreateInput!): Tag!

  # Tag更新
  updateTag(id: ID!, data: TagUpdateInput!): Tag!

  # Tag删除
  deleteTag(id: ID!): Boolean!

  # Tag批量删除
  deleteTag(filter: TagFilter!): Int!
  # User创建
  createUser(data: UserCreateInput!): User!

  # User更新
  updateUser(id: ID!, data: UserUpdateInput!): User!

  # User删除
  deleteUser(id: ID!): Boolean!

  # User批量删除
  deleteUser(filter: UserFilter!): Int!
}
