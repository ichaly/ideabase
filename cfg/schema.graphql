# IdeaBase GraphQL Schema
# 版本: 20250311124849

# 自定义标量类型
scalar Json
scalar Cursor
scalar DateTime

# 排序方向枚举，包含NULL值处理
enum SortDirection {
  ASC
  DESC
  ASC_NULLS_FIRST
  DESC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC_NULLS_LAST
}

# 空值条件枚举
enum IsInput {
  NULL
  NOT_NULL
}

# ------------------ 分页相关类型 ------------------

# 页面信息（用于游标分页）
type PageInfo {
  hasNext: Boolean!  # 是否有下一页
  hasPrev: Boolean!  # 是否有上一页
  start: Cursor  # 当前页第一条记录的游标
  end: Cursor  # 当前页最后一条记录的游标
}

# 聚合分组选项
input GroupBy {
  fields: [String!]  # 分组字段
  having: Json  # 分组过滤条件
  limit: Int  # 分组结果限制
  sort: Json  # 分组结果排序
}

# 评论表
type Comments {
  # 父评论ID
  parentId: Int
  # 评论内容
  content: String!
  id: Int!
  # 评论者
  userId: Int!
  # 评论文章
  postId: Int!
  createdAt: DateTime!
}

# 用户表
type Users {
  id: Int!
  # 邮箱
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime
  # 用户名
  name: String!
}

# 文章标签关联表
type PostTags {
  # 文章ID
  postId: Int!
  # 标签ID
  tagId: Int!
  createdAt: DateTime!
}

# 标签表
type Tags {
  postList: String!
  createdAt: DateTime!
  id: Int!
  # 标签名称
  name: String!
}

# 组织表
type Organizations {
  # 父组织ID
  parentId: Int
  createdAt: DateTime!
  # 组织名称
  name: String!
  id: Int!
}

# 文章表
type Posts {
  # 内容
  content: String
  tagList: String!
  # 作者ID
  userId: Int!
  createdAt: DateTime!
  # 标题
  title: String!
  id: Int!
}

# ------------------ 连接和边类型（游标分页） ------------------

# Organizations分页结果
type OrganizationsPage {
  items: [Organizations!]!  # 直接返回Organizations对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Posts分页结果
type PostsPage {
  items: [Posts!]!  # 直接返回Posts对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Comments分页结果
type CommentsPage {
  items: [Comments!]!  # 直接返回Comments对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Users分页结果
type UsersPage {
  items: [Users!]!  # 直接返回Users对象数组
  pageInfo: PageInfo!
  total: Int!
}

# PostTags分页结果
type PostTagsPage {
  items: [PostTags!]!  # 直接返回PostTags对象数组
  pageInfo: PageInfo!
  total: Int!
}

# Tags分页结果
type TagsPage {
  items: [Tags!]!  # 直接返回Tags对象数组
  pageInfo: PageInfo!
  total: Int!
}

# ------------------ 聚合函数相关类型 ------------------

# 数值聚合结果
type NumberStats {
  sum: Float  # 总和
  avg: Float  # 平均值
  min: Float  # 最小值
  max: Float  # 最大值
  count: Int!  # 计数
  countDistinct: Int!  # 去重计数
}

# 日期聚合结果
type DateTimeStats {
  min: DateTime  # 最早时间
  max: DateTime  # 最晚时间
  count: Int!  # 计数
  countDistinct: Int!  # 去重计数
}

# 字符串聚合结果
type StringStats {
  min: String  # 最小值(按字典序)
  max: String  # 最大值(按字典序)
  count: Int!  # 计数
  countDistinct: Int!  # 去重计数
}

# Organizations聚合
type OrganizationsStats {
  count: Int!
  name: StringStats
  id: NumberStats
  parentId: NumberStats
  createdAt: DateTimeStats
  # 分组聚合
  groupBy: [OrganizationsGroup!]
}

# Organizations分组结果
type OrganizationsGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Posts聚合
type PostsStats {
  count: Int!
  content: StringStats
  tagList: StringStats
  userId: NumberStats
  createdAt: DateTimeStats
  title: StringStats
  id: NumberStats
  # 分组聚合
  groupBy: [PostsGroup!]
}

# Posts分组结果
type PostsGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Comments聚合
type CommentsStats {
  count: Int!
  parentId: NumberStats
  content: StringStats
  id: NumberStats
  userId: NumberStats
  postId: NumberStats
  createdAt: DateTimeStats
  # 分组聚合
  groupBy: [CommentsGroup!]
}

# Comments分组结果
type CommentsGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Users聚合
type UsersStats {
  count: Int!
  createdAt: DateTimeStats
  updatedAt: DateTimeStats
  name: StringStats
  id: NumberStats
  email: StringStats
  # 分组聚合
  groupBy: [UsersGroup!]
}

# Users分组结果
type UsersGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# PostTags聚合
type PostTagsStats {
  count: Int!
  postId: NumberStats
  tagId: NumberStats
  createdAt: DateTimeStats
  # 分组聚合
  groupBy: [PostTagsGroup!]
}

# PostTags分组结果
type PostTagsGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# Tags聚合
type TagsStats {
  count: Int!
  name: StringStats
  postList: StringStats
  createdAt: DateTimeStats
  id: NumberStats
  # 分组聚合
  groupBy: [TagsGroup!]
}

# Tags分组结果
type TagsGroup {
  key: Json!  # 分组键
  count: Int!  # 计数
  # 可以包含其他聚合字段
}

# ------------------ 过滤器类型定义 ------------------

# DateTime过滤器
input DateTimeFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: DateTime  # Equals value
  in: [DateTime!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: DateTime  # Does not equal value
}

# String过滤器
input StringFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: String  # Equals value
  in: [String!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: String  # Does not equal value
  like: String  # Value matching pattern where '%' represents zero or more characters and '_' represents a single character. Eg. '_r%' finds values having 'r' in second position
  iLike: String  # Value matching (case-insensitive) pattern where '%' represents zero or more characters and '_' represents a single character. Eg. '_r%' finds values not having 'r' in second position
  regex: String  # Value matching regular pattern
  iRegex: String  # Value matching (case-insensitive) regex pattern
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
}

# Boolean过滤器
input BooleanFilter {
  eq: Boolean  # Equals value
  in: [Boolean!]  # Is in list of values
}

# Json过滤器
input JsonFilter {
  eq: Json  # Equals value
  in: [Json!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
}

# ID过滤器
input IDFilter {
  eq: ID  # Equals value
  in: [ID!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
}

# Int过滤器
input IntFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: Int  # Equals value
  in: [Int!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: Int  # Does not equal value
}

# Float过滤器
input FloatFilter {
  is: IsInput  # Is value null (true) or not null (false)
  eq: Float  # Equals value
  in: [Float!]  # Is in list of values
  is: IsInput  # Is value null (true) or not null (false)
  hasKey: String  # Value is a JSON object with the specified key
  hasKeyAny: String  # Value is a JSON object with any of the specified keys
  hasKeyAll: String  # Value is a JSON object with all of the specified keys
  ne: Float  # Does not equal value
}

# PostTags查询条件
input PostTagsFilter {
  postId: IntFilter
  tagId: IntFilter
  createdAt: DateTimeFilter
  and: [PostTagsFilter!]
  or: [PostTagsFilter!]
  not: PostTagsFilter
}

# Tags查询条件
input TagsFilter {
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  postList: StringFilter
  and: [TagsFilter!]
  or: [TagsFilter!]
  not: TagsFilter
}

# Organizations查询条件
input OrganizationsFilter {
  id: IntFilter
  parentId: IntFilter
  createdAt: DateTimeFilter
  name: StringFilter
  and: [OrganizationsFilter!]
  or: [OrganizationsFilter!]
  not: OrganizationsFilter
}

# Posts查询条件
input PostsFilter {
  userId: IntFilter
  createdAt: DateTimeFilter
  title: StringFilter
  id: IntFilter
  content: StringFilter
  tagList: StringFilter
  and: [PostsFilter!]
  or: [PostsFilter!]
  not: PostsFilter
}

# Comments查询条件
input CommentsFilter {
  parentId: IntFilter
  content: StringFilter
  id: IntFilter
  userId: IntFilter
  postId: IntFilter
  createdAt: DateTimeFilter
  and: [CommentsFilter!]
  or: [CommentsFilter!]
  not: CommentsFilter
}

# Users查询条件
input UsersFilter {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  id: IntFilter
  email: StringFilter
  and: [UsersFilter!]
  or: [UsersFilter!]
  not: UsersFilter
}

# PostTags排序
input PostTagsSort {
  tagId: SortDirection
  createdAt: SortDirection
  postId: SortDirection
}

# Tags排序
input TagsSort {
  id: SortDirection
  name: SortDirection
  postList: SortDirection
  createdAt: SortDirection
}

# Organizations排序
input OrganizationsSort {
  createdAt: SortDirection
  name: SortDirection
  id: SortDirection
  parentId: SortDirection
}

# Posts排序
input PostsSort {
  title: SortDirection
  id: SortDirection
  content: SortDirection
  tagList: SortDirection
  userId: SortDirection
  createdAt: SortDirection
}

# Comments排序
input CommentsSort {
  userId: SortDirection
  postId: SortDirection
  createdAt: SortDirection
  parentId: SortDirection
  content: SortDirection
  id: SortDirection
}

# Users排序
input UsersSort {
  updatedAt: SortDirection
  name: SortDirection
  id: SortDirection
  email: SortDirection
  createdAt: SortDirection
}

# Organizations创建输入
input OrganizationsCreateInput {
  id: Int!
  parentId: Int
  createdAt: DateTime!
  name: String!
}

# Organizations更新输入
input OrganizationsUpdateInput {
  name: String
  parentId: Int
}

# Posts创建输入
input PostsCreateInput {
  content: String
  tagList: String!
  userId: Int!
  createdAt: DateTime!
  title: String!
  id: Int!
}

# Posts更新输入
input PostsUpdateInput {
  title: String
  content: String
  tagList: String
  userId: Int
}

# Comments创建输入
input CommentsCreateInput {
  content: String!
  id: Int!
  userId: Int!
  postId: Int!
  createdAt: DateTime!
  parentId: Int
}

# Comments更新输入
input CommentsUpdateInput {
  content: String
  userId: Int
  postId: Int
  parentId: Int
}

# Users创建输入
input UsersCreateInput {
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  id: Int!
}

# Users更新输入
input UsersUpdateInput {
  email: String
  name: String
}

# PostTags创建输入
input PostTagsCreateInput {
  tagId: Int!
  createdAt: DateTime!
  postId: Int!
}

# PostTags更新输入
input PostTagsUpdateInput {
  postId: Int
  tagId: Int
}

# Tags创建输入
input TagsCreateInput {
  name: String!
  postList: String!
  createdAt: DateTime!
  id: Int!
}

# Tags更新输入
input TagsUpdateInput {
  name: String
  postList: String
}

# 关联操作
input ConnectInput {
  id: ID!
}

# 关系操作
input RelationInput {
  connect: [ID!]
  disconnect: [ID!]
}

# ------------------ 查询和变更 ------------------

# 查询根类型
type Query {
  # 单个PostTags查询
  postTags(id: ID!): PostTags

  # PostTags列表查询
  postTags(
    filter: PostTagsFilter
    sort: [PostTagsSort!]
    limit: Int
    offset: Int
    first: Int
    after: Cursor
    last: Int
    before: Cursor
  ): PostTagsPage!

  # PostTags统计查询
  postTagsStats(filter: PostTagsFilter, groupBy: GroupBy): PostTagsStats!
  # 单个Tags查询
  tags(id: ID!): Tags

  # Tags列表查询
  tags(
    filter: TagsFilter
    sort: [TagsSort!]
    limit: Int
    offset: Int
    first: Int
    after: Cursor
    last: Int
    before: Cursor
  ): TagsPage!

  # Tags统计查询
  tagsStats(filter: TagsFilter, groupBy: GroupBy): TagsStats!
  # 单个Organizations查询
  organizations(id: ID!): Organizations

  # Organizations列表查询
  organizations(
    filter: OrganizationsFilter
    sort: [OrganizationsSort!]
    limit: Int
    offset: Int
    first: Int
    after: Cursor
    last: Int
    before: Cursor
  ): OrganizationsPage!

  # Organizations统计查询
  organizationsStats(filter: OrganizationsFilter, groupBy: GroupBy): OrganizationsStats!
  # 单个Posts查询
  posts(id: ID!): Posts

  # Posts列表查询
  posts(
    filter: PostsFilter
    sort: [PostsSort!]
    limit: Int
    offset: Int
    first: Int
    after: Cursor
    last: Int
    before: Cursor
  ): PostsPage!

  # Posts统计查询
  postsStats(filter: PostsFilter, groupBy: GroupBy): PostsStats!
  # 单个Comments查询
  comments(id: ID!): Comments

  # Comments列表查询
  comments(
    filter: CommentsFilter
    sort: [CommentsSort!]
    limit: Int
    offset: Int
    first: Int
    after: Cursor
    last: Int
    before: Cursor
  ): CommentsPage!

  # Comments统计查询
  commentsStats(filter: CommentsFilter, groupBy: GroupBy): CommentsStats!
  # 单个Users查询
  users(id: ID!): Users

  # Users列表查询
  users(
    filter: UsersFilter
    sort: [UsersSort!]
    limit: Int
    offset: Int
    first: Int
    after: Cursor
    last: Int
    before: Cursor
  ): UsersPage!

  # Users统计查询
  usersStats(filter: UsersFilter, groupBy: GroupBy): UsersStats!
}

# 变更根类型
type Mutation {
  # 创建Organizations
  createOrganizations(data: OrganizationsCreateInput!): Organizations!

  # 更新Organizations
  updateOrganizations(id: ID!, data: OrganizationsUpdateInput!): Organizations!

  # 删除Organizations
  deleteOrganizations(id: ID!): Boolean!

  # 批量删除Organizations
  deleteOrganizations(filter: OrganizationsFilter!): Int!
  # 创建Posts
  createPosts(data: PostsCreateInput!): Posts!

  # 更新Posts
  updatePosts(id: ID!, data: PostsUpdateInput!): Posts!

  # 删除Posts
  deletePosts(id: ID!): Boolean!

  # 批量删除Posts
  deletePosts(filter: PostsFilter!): Int!
  # 创建Comments
  createComments(data: CommentsCreateInput!): Comments!

  # 更新Comments
  updateComments(id: ID!, data: CommentsUpdateInput!): Comments!

  # 删除Comments
  deleteComments(id: ID!): Boolean!

  # 批量删除Comments
  deleteComments(filter: CommentsFilter!): Int!
  # 创建Users
  createUsers(data: UsersCreateInput!): Users!

  # 更新Users
  updateUsers(id: ID!, data: UsersUpdateInput!): Users!

  # 删除Users
  deleteUsers(id: ID!): Boolean!

  # 批量删除Users
  deleteUsers(filter: UsersFilter!): Int!
  # 创建PostTags
  createPostTags(data: PostTagsCreateInput!): PostTags!

  # 更新PostTags
  updatePostTags(id: ID!, data: PostTagsUpdateInput!): PostTags!

  # 删除PostTags
  deletePostTags(id: ID!): Boolean!

  # 批量删除PostTags
  deletePostTags(filter: PostTagsFilter!): Int!
  # 创建Tags
  createTags(data: TagsCreateInput!): Tags!

  # 更新Tags
  updateTags(id: ID!, data: TagsUpdateInput!): Tags!

  # 删除Tags
  deleteTags(id: ID!): Boolean!

  # 批量删除Tags
  deleteTags(filter: TagsFilter!): Int!
}
