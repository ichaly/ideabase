---
description: 
globs: 
alwaysApply: false
---
# SQL生成最佳实践

## SQL转换核心原则

### 关系映射
- 一对一关系：使用内连接或左连接
- 一对多关系：使用子查询或JOIN+GROUP BY
- 多对多关系：使用中间表连接
- 自关联关系：使用别名区分同一表的不同引用

### 查询优化
- 优先使用CTE (WITH语句) 简化复杂查询和提高可读性
- 按需获取字段，避免`SELECT *`
- 使用子查询替代重复JOIN
- 优先使用参数化查询防止SQL注入

### 数据库兼容
- 底层使用通用SQL语法以支持多种数据库
- PostgreSQL特性：使用JSONB、数组类型、递归CTE
- MySQL特性：适配GROUP_CONCAT、JSON函数

## 代码结构

### Compiler接口
```go
type Compiler interface {
    // 包装标识符(表名、列名等)
    Wrap(string) string
    
    // 添加空格
    Space() string
    
    // 引用字符串值
    Quote(string) string
    
    // 生成带绑定值的SQL
    CompileWithValues(context.Context, *AST) (string, []interface{}, error)
}
```

### SQL构建最佳实践
- 使用strings.Builder进行SQL拼接
- 利用Compiler方法处理标识符和值
- 分阶段构建复杂SQL：WITH、SELECT、FROM、WHERE等
- 使用占位符处理参数值

## 查询类型支持

### 基本操作
- 查询(Query)：SELECT语句，支持过滤、排序和分页
- 变更(Mutation)：INSERT、UPDATE、DELETE语句
- 订阅(Subscription)：基于触发器和通知

### 高级功能
- 聚合查询：COUNT、SUM、AVG等
- 复合查询：UNION、INTERSECT
- 窗口函数：OVER、PARTITION BY
- 全文搜索集成
