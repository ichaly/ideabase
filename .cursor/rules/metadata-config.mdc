---
description: 
globs: 
alwaysApply: false
---
# 配置元数据加载规则

## 核心原则

### 1. 配置独立性
- 配置系统可以完全基于配置文件，不依赖数据库和JSON文件
- 所有配置信息应通过配置文件进行管理
- 配置可对数据库加载和json文件的加载做修正扩展

### 2. 命名映射规则
- 支持表和字段的重命名功能
- 重命名必须明确指定源表名(table)和目标列名(column)
- 命名映射应支持双向查询

### 3. 虚拟对象支持
- 支持虚拟类定义（table为空）
- 支持虚拟字段定义（column为空）
- 虚拟对象应支持完整的元数据定义

### 4. 索引管理
- 类别名索引应包含三个维度：
  - 表名索引
  - 驼峰类名索引
  - 别名索引
- 别名索引应维护独立的类指针（override: false）或与主类共享指针（override: true）
- 表名和驼峰类名应共享同一个类指针
- 字段索引也要保持相同逻辑，字段级别也支持override配置

### 5. 别名处理模式（override布尔型）
- `override: true` 表示别名覆盖/重写主类或字段指针（即只有表名和别名两个索引，指向同一指针）
- `override: false` 或省略，表示附加/扩展模式（即表名、驼峰名、别名各自独立，别名指向独立指针）
- 字段级别的override与类级别一致，控制字段别名的指针行为

## 配置示例

```yaml
# 类配置使用Map结构，key为类名或别名
classes:
  User:  # 驼峰类名作为key
    table: users
    # override: false 或省略，表示附加模式
    fields:
      id:
        column: user_id
        type: int
        description: "用户ID"
        is_primary: true
        # override: false 或省略
      virtualField:
        virtual: true
        type: string
        description: "虚拟字段"
        # override: false 或省略
      nameAlias:
        column: name
        type: string
        description: "用户名别名"
        override: true   # 字段别名覆盖主字段指针
  
  Member:  # 别名作为key
    table: users
    override: true   # 表示覆盖模式
    fields:
      id:
        column: user_id
        type: int
        description: "用户ID"
        is_primary: true
        override: true   # 字段别名覆盖主字段指针
      virtualField:
        virtual: true
        type: string
        description: "虚拟字段"
        # override: false 或省略

  # 虚拟类示例
  VirtualClass:
    # override: false 或省略
    fields:
      virtualField1:
        type: string
        description: "虚拟字段1"
        # override: false 或省略
      virtualField2:
        type: string
        description: "虚拟字段2"
        # override: false 或省略
```

## 实现注意事项

1. 性能考虑：
   - 使用高效的数据结构存储索引
   - 实现缓存机制
   - 支持增量更新

2. 错误处理：
   - 配置验证错误
   - 命名冲突检测
   - 循环依赖检查

3. 配置验证规则：
   - 检查类和字段的override字段为布尔类型
   - 验证表名和字段名的唯一性
   - 确保虚拟类不包含非虚拟字段
   - 验证别名引用的正确性
   - 检查fields为map结构，key为字段名，value为字段配置对象

## 字段配置合并伪代码（applyFieldConfig）

```go
for fieldName, fieldConfig in fieldConfigs {
    var field = nil

    if fieldConfig.Override && fieldConfig.Column != "" {
        // 覆盖模式
        if baseField := class.Fields[fieldConfig.Column]; baseField != nil {
            baseField.Name = fieldName
            updateField(baseField, fieldConfig)
            field = baseField
        }
    } else if fieldConfig.Column != "" && fieldName != fieldConfig.Column {
        // 追加模式
        if baseField := class.Fields[fieldConfig.Column]; baseField != nil {
            copied = deepCopy(baseField)
            copied.Name = fieldName
            updateField(copied, fieldConfig)
            field = copied
        }
    }

    // 其余情况（虚拟字段、普通字段、找不到原字段等）统一新建
    if field == nil {
        field = createField(class.Name, fieldName, fieldConfig)
    }
    class.Fields[fieldName] = field
}
```
