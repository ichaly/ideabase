---
description: 项目规则
globs: 
alwaysApply: true
---
# IdeaBase项目规范

## 项目概述
- **名称**：IdeaBase
- **类型**：Golang开发的GraphQL到SQL编译中间件
- **参考项目**：github.com/dosco/graphjin
- **开发理念**：采用最小增量开发，编写完善的单元测试，避免代码积累导致的维护困难

## 代码规范
1. **命名风格**：
   - 使用简短明确的命名
   - 统一使用`my`作为扩展方法的接收器参数名
   - 遵循已有代码的命名约定

2. **格式要求**：
   - 保持高可读性
   - 代码行长度适中
   - 使用最少的代码行数完成逻辑

3. **注释要求**：
   - 代码提交注释使用中文
   - 关键逻辑添加必要注释

## 核心功能
1. **SQL编译**：
   - 支持复杂的CRUD操作
   - 支持多种表关系：一对一、一对多、多对一、多对多、自关联

2. **数据库支持**：
   - 优先实现PostgreSQL支持
   - 为MySQL预留扩展接口

3. **Schema处理**：
   - 支持从数据库直接读取结构构建schema
   - 支持预生成schema模式，适应无元数据读取权限的环境

4. **高级特性**：
   - 支持配置化虚拟表
   - 通过GraphQL注解实现缓存
   - 提供接口支持内存缓存或Redis
   - 实现数据库连接池和事务支持
   - 预留自定义resolver接口

## 技术架构
1. **依赖注入**：
   - 使用Google Wire或Uber Dig/Fx

2. **数据访问层**：
   - 使用Gorm作为ORM框架

3. **配置管理**：
   - 使用Viper作为统一配置框架
   - 采用option模式设计配置
   - 各模块拥有独立配置项，统一管理但解耦

## 项目结构
- **工作区**：使用go.work管理的多模块项目
- **核心模块**：
  - `gql`：GraphQL到SQL编译的核心模块，可独立使用
  - `svc`：负责将gql模块发布为HTTP服务
  - `gtw`：合并多个svc的GraphQL schema为整体，作为对外网关
  - `std`：标准模块，作为基础依赖，包含实体类基类和通用配置加载等核心组件
  - `utl`：通用工具模块，封装常用工具类和函数，提供跨模块复用的功能

## 模块职责
1. **gql模块**：GraphQL解析与SQL转换的核心逻辑
2. **svc模块**：服务发布与API暴露
3. **gtw模块**：多服务整合与网关功能
4. **std模块**：基础设施与共享组件
   - 实体类基类定义
   - 通用配置加载机制
   - 核心接口规范
5. **utl模块**：工具类集合
   - 通用功能封装
   - 跨模块复用的辅助函数
   - 扩展第三方库功能

## 技术栈
1. **工具库**：
   - github.com/duke-git/lancet/v2
   - github.com/samber/lo
   - github.com/iancoleman/strcase

2. **Web框架**：
   - 首选：github.com/gofiber/fiber
   - 备选：github.com/gin-gonic/gin

3. **关键组件**：
   - 配置框架：github.com/spf13/viper
   - GraphQL解析：github.com/vektah/gqlparser/v2
   - ORM框架：gorm.io/gorm

## 测试策略
1. **单元测试**：
   - 使用go-sqlmock模拟数据库交互

2. **集成测试**：
   - 使用testcontainers-go在真实环境验证SQL执行结果
   - 基于Docker的临时数据库

## 模块依赖关系
- `std`：基础模块，被其他所有模块依赖
- `utl`：工具模块，可被所有其他模块引用
- `gql`：可独立使用，依赖`std`和`utl`
- `svc`：依赖`gql`、`std`和`utl`
- `gtw`：依赖`std`和`utl`，聚合多个`svc`

## 性能要求
- 架构设计需考虑高性能
- 优化SQL生成以减少不必要的查询
- 高效的缓存策略

## 代码示例
遇到需要具体代码实现的场景，请提供最佳实践示例，遵循上述规范。

---

以上规范请在项目开发中严格遵守，确保代码质量和项目可维护性。 